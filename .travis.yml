language: python
dist: xenial
# default gcc of bionic does not compile gdal 1.x

cache:
  directories:
    - $GDALINST
    - ~/.cache/pip

env:
  global:
    - PIP_WHEEL_DIR=$HOME/.cache/pip/wheels
    - PIP_FIND_LINKS=file://$HOME/.cache/pip/wheels
    - GDALINST=$HOME/gdalinstall
    - GDALBUILD=$HOME/gdalbuild
    - PROJINST=$HOME/gdalinstall
    - PROJBUILD=$HOME/projbuild
    - MAKEFLAGS="-j 2"
    - CXXFLAGS="-O0"
    - CFLAGS="-O0"

matrix:
  include:
    # Test all supported gdal minor versions (except latest stable) with one python version
    - python: "3.6"
      env:
        GDALVERSION="1.11.5"
        PROJVERSION="4.8.0"
    - python: "3.6"
      env:
        GDALVERSION="2.0.3"
        PROJVERSION="4.9.3"
    - python: "3.6"
      env:
        GDALVERSION="2.1.4"
        PROJVERSION="4.9.3"
    - python: "3.6"
      env:
        GDALVERSION="2.2.4"
        PROJVERSION="4.9.3"
    - python: "3.6"
      env:
        GDALVERSION="2.3.3"
        PROJVERSION="4.9.3"
    - python: "3.6"
      env:
        GDALVERSION="2.4.4"
        PROJVERSION="4.9.3"
    - python: "3.6"
      env:
        GDALVERSION="3.0.4"
        PROJVERSION="6.2.1"

    # Test all supported python versions with latest stable gdal release
    - python: "2.7"
      env:
        GDALVERSION="3.1.0"
        PROJVERSION="6.3.2"
    - python: "3.6"
      env:
        GDALVERSION="3.1.0"
        PROJVERSION="6.3.2"
    - python: "3.7"
      env:
        GDALVERSION="3.1.0"
        PROJVERSION="6.3.2"
    - python: "3.8"
      env:
        GDALVERSION="3.1.0"
        PROJVERSION="6.3.2"

    # Test master
    - python: "3.8"
      env:
        GDALVERSION="master"
        PROJVERSION="7.0.1"

  allow_failures:
    - env:
        GDALVERSION="master"
        PROJVERSION="7.0.1"

addons:
  apt:
    packages:
    - libatlas-dev
    - libatlas-base-dev
    - gfortran
    - libsqlite3-dev
    - sqlite3

before_install:
  - python -m pip install -U pip
  - python -m pip wheel -r requirements-dev.txt
  - python -m pip install -r requirements-dev.txt
  - python -m pip install wheel coveralls>=1.1 --upgrade
  - export PATH=$GDALINST/gdal-$GDALVERSION/bin:$GDALINST/proj-$PROJVERSION/bin:$PATH
  - export LD_LIBRARY_PATH=$GDALINST/gdal-$GDALVERSION/lib:$GDALINST/proj-$PROJVERSION/lib:$LD_LIBRARY_PATH
  - . ./scripts/travis_proj_install.sh
  - . ./scripts/travis_gdal_install.sh
  - export GDAL_DATA=$GDALINST/gdal-$GDALVERSION/share/gdal
  - export PROJ_LIB=$GDALINST/gdal-$GDALVERSION/share/proj
  - gdal-config --version

install:
  - if [ "$GDALVERSION" = "master" ]; then echo "Using gdal master"; elif [ $(gdal-config --version) == $(sed 's/[a-zA-Z].*//g' <<< $GDALVERSION) ]; then echo "Using gdal $GDALVERSION"; else echo "NOT using gdal $GDALVERSION as expected; aborting"; exit 1; fi
  - "GDAL_CONFIG=$GDALINST/gdal-$GDALVERSION/bin/gdal-config python -m pip install --no-deps --force-reinstall --no-use-pep517 -e ."
  - python -m pip freeze
  - fio --version
  - fio --gdal-version
  - python -c "import fiona; fiona.show_versions()"

script:
  - python -m pytest -m "not wheel" --cov fiona --cov-report term-missing

after_script:
  - python setup.py clean

after_success:
  - coveralls || echo "!! intermittent coveralls failure"
