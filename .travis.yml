dist: xenial

language: python

sudo: false

cache:
  directories:
    - $GDALINST
    - ~/.cache/pip

git:
  depth: 3    

env:
  global:
    - PIP_WHEEL_DIR=$HOME/.cache/pip/wheels
    - PIP_FIND_LINKS=file://$HOME/.cache/pip/wheels
    - GDALINST=$HOME/gdalinstall
    - GDALBUILD=$HOME/gdalbuild
    - PROJBUILD=$HOME/projbuild
    - PROJVERSION="6.0.0"
    
  matrix:

    - GDALVERSION="2.2.4"
    - GDALVERSION="2.3.3"
    - GDALVERSION="2.4.1"

matrix:

  include:
   - python: "3.7"
     env: GDALVERSION="3.0.0"
     if: type != cron

   - python: "3.7"
     env: GDALVERSION="trunk"
     if: type != cron

  allow_failures:
    - env: GDALVERSION="trunk"
    - env: GDALVERSION="3.0.0"

addons:
  apt:
    packages:
    - libhdf5-serial-dev
    - libatlas-dev
    - libatlas-base-dev
    - gfortran
    - libsqlite3-dev
    - sqlite3

python:
  - "3.7"

before_install:
  - pip install -U pip
  - pip install --upgrade coveralls>=1.1
  
  # Export environment variables and install proj and gdal from source
  - export PATH=$GDALINST/gdal-$GDALVERSION/bin:$GDALINST/proj-$PROJVERSION/bin:$PATH
  - export LD_LIBRARY_PATH=$GDALINST/gdal-$GDALVERSION/lib:$GDALINST/proj-$PROJVERSION/lib:$LD_LIBRARY_PATH
  - . ./scripts/travis_proj_install.sh
  - . ./scripts/travis_gdal_install.sh
  - export GDAL_DATA=$GDALINST/gdal-$GDALVERSION/share/gdal
  - export PROJ_LIB=$GDALINST/proj-$PROJVERSION/share/proj

install:

  # If event type is cron, remove version constraints from python dependencies 
  - if [ "$TRAVIS_EVENT_TYPE" = "cron" ]; then cat requirements.txt | python scripts/remove_version.py | tee requirements.txt; fi
  - if [ "$TRAVIS_EVENT_TYPE" = "cron" ]; then cat requirements-dev.txt | python scripts/remove_version.py | tee requirements-dev.txt; fi
  - cat requirements.txt
  - cat requirements-dev.txt
  
  # Install python dependencies 
  - pip install --upgrade --force-reinstall -r requirements-dev.txt
  - pip uninstall -y fiona

  # Check if the installed version of gdal is correct. Fail if not.
  - if [ "$GDALVERSION" = "trunk" ]; then echo "Using gdal trunk"; elif [ $(gdal-config --version) == $(sed 's/[a-zA-Z].*//g' <<< $GDALVERSION) ]; then echo "Using gdal $GDALVERSION"; else echo "NOT using gdal $GDALVERSION as expected; aborting"; exit 1; fi

  # Install fiona
  - pip install --global-option=build_ext --global-option='-I$GDALINST/gdal-$GDALVERSION/include' --global-option='-L$GDALINST/gdal-$GDALVERSION/lib' --global-option='-R$GDALINST/gdal-$GDALVERSION/lib' -e .[test]

  # Print installation information
  - fio --version
  - gdal-config --version
  - fio --gdal-version
  - pip freeze

script:
  - python -m pytest -m "not wheel" --cov fiona --cov-report term-missing

after_success:
  - coveralls || echo "!! intermittent coveralls failure"

before_cache:
  - if [ "$GDALVERSION" = "trunk" ]; then rm -rf $GDALINST/gdal-$GDALVERSION; fi
