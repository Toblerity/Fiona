from typing import Tuple, Optional, Union


class CRS:
    @property
    def data(self) -> dict: ...
    @property
    def is_valid(self) -> bool: ...
    @property
    def is_epsg_code(self) -> bool: ...
    @property
    def wkt(self) -> str: ...
    @property
    def is_geographic(self) -> bool: ...
    @property
    def is_projected(self) -> bool: ...
    @property
    def linear_units(self) -> str: ...
    @property
    def linear_units_factor(self) -> Tuple[str, float]: ...
    @property
    def units_factor(self) -> Tuple[str, float]: ...
    def to_dict(self, projjson: bool = False) -> dict: ...
    def to_proj4(self) -> str: ...
    def to_wkt(self, morph_to_esri_dialect: bool = False, version: Optional[str] = None) -> str: ...
    def to_epsg(self, confidence_threshold: int = 70) -> Optional[int]: ...
    def to_authority(self, confidence_threshold: int = 70) -> Optional[Tuple[str, str]]: ...
    def _matches(self, confidence_threshold: int = 70) -> dict: ...
    def to_string(self) -> str: ...
    @staticmethod
    def from_epsg(code: int) -> "CRS": ...
    @staticmethod
    def from_proj4(proj: str) -> "CRS": ...
    @staticmethod
    def from_dict(initialdata: Optional[dict] = None, **kwargs) -> "CRS": ...
    @staticmethod
    def from_wkt(wkt: str, morph_from_esri_dialect: bool = False) -> "CRS": ...
    @staticmethod
    def from_user_input(value: object, morph_from_esri_dialect: bool = False) -> "CRS": ...
    @staticmethod
    def from_authority(auth_name: str, code: Union[int, str]) -> "CRS": ...
    @staticmethod
    def from_string(value: str, morph_from_esri_dialect: bool = False) -> "CRS": ...
