name: Linux CI

on: [push, pull_request]

jobs:
  build:
    runs-on: [ubuntu-18.04]
    strategy:
      fail-fast: false
      matrix:
        config:
          # Test all supported gdal minor versions (except latest stable) with one python version
          - { python-version: 3.6, GDALVERSION: "2.0.3", PROJVERSION: "4.9.3" }
          - { python-version: 3.6, GDALVERSION: "2.1.4", PROJVERSION: "4.9.3" }
          - { python-version: 3.6, GDALVERSION: "2.2.4", PROJVERSION: "4.9.3" }
          - { python-version: 3.6, GDALVERSION: "2.3.3", PROJVERSION: "4.9.3" }
          - { python-version: 3.6, GDALVERSION: "2.4.4", PROJVERSION: "4.9.3" }
          - { python-version: 3.6, GDALVERSION: "3.0.4", PROJVERSION: "6.2.1" }
          - { python-version: 3.6, GDALVERSION: "3.1.0", PROJVERSION: "6.3.2" }

          # Test all supported python versions with latest stable gdal release
          - { python-version: 3.6, GDALVERSION: "3.2.0", PROJVERSION: "7.2.0" }
          - { python-version: 3.7, GDALVERSION: "3.2.0", PROJVERSION: "7.2.0" }
          - { python-version: 3.8, GDALVERSION: "3.2.0", PROJVERSION: "7.2.0" }
          - { python-version: 3.9, GDALVERSION: "3.2.0", PROJVERSION: "7.2.0" }

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.config.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.config.python-version }}

        # Environment variables need to be newly set in each step. Create env_variables to facilitate this.
      - name: Set env variables
        run: |
          touch $GITHUB_WORKSPACE/env_variables
          echo "export CYTHON_COVERAGE=\"true\"" >> $GITHUB_WORKSPACE/env_variables
          echo "export MAKEFLAGS=\"-j 4 -s\"" >> $GITHUB_WORKSPACE/env_variables
          echo "export CXXFLAGS=\"-O0\"" >> $GITHUB_WORKSPACE/env_variables
          echo "export CFLAGS=\"-O0\"" >> $GITHUB_WORKSPACE/env_variables
          echo "export GDALINST=$GITHUB_WORKSPACE/gdalinstall" >> $GITHUB_WORKSPACE/env_variables
          echo "export GDALBUILD=$GITHUB_WORKSPACE/gdalbuild" >> $GITHUB_WORKSPACE/env_variables
          echo "export PROJINST=$GITHUB_WORKSPACE/gdalinstall" >> $GITHUB_WORKSPACE/env_variables
          echo "export PROJBUILD=$GITHUB_WORKSPACE/projbuild" >> $GITHUB_WORKSPACE/env_variables
          echo "export FILEGDB=$GITHUB_WORKSPACE/gdalinstall/filegdb" >> $GITHUB_WORKSPACE/env_variables
          echo "export GDALVERSION=${{matrix.config.GDALVERSION}}" >> $GITHUB_WORKSPACE/env_variables
          echo "export PROJVERSION=${{matrix.config.PROJVERSION}}" >> $GITHUB_WORKSPACE/env_variables
          echo "export TRAVIS_BUILD_DIR=$GITHUB_WORKSPACE" >> $GITHUB_WORKSPACE/env_variables
          echo "export TRAVIS_OS_NAME=linux" >> $GITHUB_WORKSPACE/env_variables
          source $GITHUB_WORKSPACE/env_variables
          echo "export GDAL_DATA=$GDALINST/gdal-$GDALVERSION/share/gdal" >> $GITHUB_WORKSPACE/env_variables
          echo "export PROJ_LIB=$GDALINST/gdal-$GDALVERSION/share/proj" >> $GITHUB_WORKSPACE/env_variables
          echo "export PATH=$GDALINST/gdal-$GDALVERSION/bin:$GDALINST/proj-$PROJVERSION/bin:\$PATH" >> $GITHUB_WORKSPACE/env_variables
          echo "export LD_LIBRARY_PATH=$GDALINST/gdal-$GDALVERSION/lib:$GDALINST/proj-$PROJVERSION/lib:$FILEGDB/lib:\$LD_LIBRARY_PATH" >> $GITHUB_WORKSPACE/env_variables
          cat $GITHUB_WORKSPACE/env_variables

      - name: Install apt packages
        run: |
          sudo apt-get install libatlas-base-dev libcurl4-openssl-dev libgeos-dev libfreexl-dev libzstd-dev libspatialite-dev
          # Unlike travis github CI includes nonstandard package repositories.
          # Updates of not in the standard ubuntu repositories included packages (e.g. bionic/universe or bionic/main) could change API version and break cached gdal binaries. 
          # The following command creates a list of these packages, which is used as key for the GDAL cache
          apt list --installed | grep 'libgeos-dev\|libxml2-dev' > $GITHUB_WORKSPACE/apt_list
          cat $GITHUB_WORKSPACE/apt_list

      - name: GDAL Cache
        uses: actions/cache@v2
        with:
          path: gdalinstall
          key: ${{ runner.os }}-gdal-${{ matrix.config.GDALVERSION }}-proj-${{ matrix.config.PROJVERSION }}-${{ hashFiles('**/apt_list') }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip wheel
          python -m pip install -r requirements-ci.txt
          python -m pip wheel -r requirements-dev.txt
          python -m pip install -r requirements-dev.txt

      - name: Build PROJ
        run: |
          source $GITHUB_WORKSPACE/env_variables
          chmod +x scripts/travis_proj_install.sh && ./scripts/travis_proj_install.sh

      - name: Install FileGDB
        run: |
          source $GITHUB_WORKSPACE/env_variables
          chmod +x scripts/travis_filegdb_install.sh && ./scripts/travis_filegdb_install.sh

      - name: Build GDAL
        run: |
          source $GITHUB_WORKSPACE/env_variables
          chmod +x scripts/travis_gdal_install.sh && ./scripts/travis_gdal_install.sh
          gdal-config --version

      - name: Build Fiona
        run: |
          source $GITHUB_WORKSPACE/env_variables
          if [ "$GDALVERSION" = "master" ]; then echo "Using gdal master"; elif [ $($GDALINST/gdal-$GDALVERSION/bin/gdal-config --version) == $(sed 's/[a-zA-Z].*//g' <<< $GDALVERSION) ]; then echo "Using gdal $GDALVERSION"; else echo "NOT using gdal $GDALVERSION as expected; aborting"; exit 1; fi
          GDAL_CONFIG=$GDALINST/gdal-$GDALVERSION/bin/gdal-config python -m pip install --no-deps --force-reinstall --no-use-pep517 -e .

      - name: Print Environment
        run: |
          source $GITHUB_WORKSPACE/env_variables
          echo "python -m pip freeze"
          python -m pip freeze
          echo ""
          echo "fio --version"
          fio --version
          echo ""
          echo "fio --gdal-version"
          fio --gdal-version
          echo ""
          echo "python -c \"import fiona; fiona.show_versions()\""
          python -c "import fiona; fiona.show_versions()"

      - name: Pytest
        run: |
          source $GITHUB_WORKSPACE/env_variables
          python -m pytest -m "not wheel" --cov fiona --cov-report term-missing

      - name: Coveralls
        run: coveralls || echo "!! intermittent coveralls failure"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
