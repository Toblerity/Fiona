
name: MacOS CI

on: [push, pull_request]

jobs:
  build:
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        config:
          - {python-version: 3.6, GDALVERSION: "2.3.3",   PROJVERSION: "4.9.3"}
          - {python-version: 3.6, GDALVERSION: "2.4.4",   PROJVERSION: "4.9.3"}
          - {python-version: 3.6, GDALVERSION: "3.0.4",   PROJVERSION: "6.2.1"}
          - {python-version: 3.6, GDALVERSION: "3.1.0",   PROJVERSION: "6.3.2"}
          - {python-version: 3.7, GDALVERSION: "3.1.0",   PROJVERSION: "6.3.2"}
          - {python-version: 3.8, GDALVERSION: "3.1.0",   PROJVERSION: "6.3.2"}
#          - {python-version: 3.6, GDALVERSION: "master",  PROJVERSION: "7.0.1", continue-on-error: true}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.config.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.config.python-version }}

      - name: Set env variables
        run: |
          touch $GITHUB_WORKSPACE/env_variables
          echo "export MAKEFLAGS=\"-j 4 -s\"" >> $GITHUB_WORKSPACE/env_variables
          echo "export CXXFLAGS=\"-O0\"" >> $GITHUB_WORKSPACE/env_variables
          echo "export CFLAGS=\"-O0\"" >> $GITHUB_WORKSPACE/env_variables
          echo "export GDALINST=$GITHUB_WORKSPACE/gdalinstall" >> $GITHUB_WORKSPACE/env_variables
          echo "export GDALBUILD=$GITHUB_WORKSPACE/gdalbuild" >> $GITHUB_WORKSPACE/env_variables
          echo "export PROJINST=$GITHUB_WORKSPACE/gdalinstall" >> $GITHUB_WORKSPACE/env_variables
          echo "export PROJBUILD=$GITHUB_WORKSPACE/projbuild" >> $GITHUB_WORKSPACE/env_variables
          echo "export GDALVERSION=${{matrix.config.GDALVERSION}}" >> $GITHUB_WORKSPACE/env_variables
          echo "export PROJVERSION=${{matrix.config.PROJVERSION}}" >> $GITHUB_WORKSPACE/env_variables
          echo "export TRAVIS_BUILD_DIR=$GITHUB_WORKSPACE" >> $GITHUB_WORKSPACE/env_variables
          echo "export TRAVIS_OS_NAME=osx" >> $GITHUB_WORKSPACE/env_variables
          echo "export PATH="/usr/local/opt/expat/bin:\$PATH" >> $GITHUB_WORKSPACE/env_variables
          echo "export PATH="/usr/local/opt/libxml2/bin:\$PATH" >> $GITHUB_WORKSPACE/env_variables
          source $GITHUB_WORKSPACE/env_variables
          echo "export GDAL_DATA=$GDALINST/gdal-$GDALVERSION/share/gdal" >> $GITHUB_WORKSPACE/env_variables
          echo "export PROJ_LIB=$GDALINST/gdal-$GDALVERSION/share/proj" >> $GITHUB_WORKSPACE/env_variables
          echo "export PATH=$GDALINST/gdal-$GDALVERSION/bin:$GDALINST/proj-$PROJVERSION/bin:\$PATH" >> $GITHUB_WORKSPACE/env_variables
          echo "export DYLD_LIBRARY_PATH=$GDALINST/gdal-$GDALVERSION/lib:$GDALINST/proj-$PROJVERSION/lib:\$DYLD_LIBRARY_PATH" >> $GITHUB_WORKSPACE/env_variables
          cat $GITHUB_WORKSPACE/env_variables

      - name: Install brew packages
        run: |
          brew install pkg-config expat libspatialite sqlite geos
          brew list --versions | grep 'expat\|libspatialite\|sqlite\|geos\|curl\|libxml2\|freexl\|zstd' > $GITHUB_WORKSPACE/brew_list
          cat $GITHUB_WORKSPACE/brew_list

      - name: Dependency Cache
        uses: actions/cache@v2
        with:
          path: gdalinstall
          key: ${{ runner.os }}-gdal-${{ matrix.config.GDALVERSION }}-proj-${{ matrix.config.PROJVERSION }}-${{ hashFiles('**/brew_list')}}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev.txt
          python -m pip install coveralls>=1.1 --upgrade

      - name: Build PROJ
        run: |
          source $GITHUB_WORKSPACE/env_variables
          chmod +x scripts/travis_proj_install.sh && ./scripts/travis_proj_install.sh

      - name: Build GDAL
        run: |
          source $GITHUB_WORKSPACE/env_variables
          chmod +x scripts/travis_gdal_install.sh && ./scripts/travis_gdal_install.sh
          gdal-config --version

      - name: Build Fiona
        run: |
          source $GITHUB_WORKSPACE/env_variables
          if [ "$GDALVERSION" = "master" ]; then echo "Using gdal master"; elif [ $($GDALINST/gdal-$GDALVERSION/bin/gdal-config --version) == $(sed 's/[a-zA-Z].*//g' <<< $GDALVERSION) ]; then echo "Using gdal $GDALVERSION"; else echo "NOT using gdal $GDALVERSION as expected; aborting"; exit 1; fi
          GDAL_CONFIG=$GDALINST/gdal-$GDALVERSION/bin/gdal-config python -m pip install -v -v -v --no-deps --force-reinstall --no-use-pep517 -e .
          fio --version
          fio --gdal-version

      - name: Test with pytest
        run: |
          source $GITHUB_WORKSPACE/env_variables
          python -m pytest -m "not wheel" --cov fiona --cov-report term-missing
