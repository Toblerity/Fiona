# Based on appveyor.yml from https://github.com/PDAL/PDAL and https://github.com/ogrisel/python-appveyor-demo

platform: x64


environment:

    global:
        # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
        # /E:ON and /V:ON options are not enabled in the batch script intepreter
        # See: http://stackoverflow.com/a/13751649/163740
        CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
        GDAL_HOME: "C:\\gdal"

    matrix:
        # PYTHON_VERSION and PYTHON_ARCH are required by run_with_env.cmd.
        # The 4-digit number in the GISInternals archives is the MSVC version used to build
        # the libraries. It does not need to match the version of MSVC used to build Python.
        # https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering
        - PYTHON: "C:\\Python36-x64"
          PYTHON_VERSION: "3.6"
          PYTHON_ARCH: "64"
          GDAL_VERSION: "2.2.3"
          GIS_INTERNALS: "release-1911-x64-gdal-2-2-3-mapserver-7-0-7.zip"
          GIS_INTERNALS_LIBS: "release-1911-x64-gdal-2-2-3-mapserver-7-0-7-libs.zip"

        - PYTHON: "C:\\Python36-x64"
          PYTHON_VERSION: "3.6"
          PYTHON_ARCH: "64"
          GDAL_VERSION: "2.3.3"
          GIS_INTERNALS: "release-1911-x64-gdal-2-3-3-mapserver-7-2-1.zip"
          GIS_INTERNALS_LIBS: "release-1911-x64-gdal-2-3-3-mapserver-7-2-1-libs.zip"

        - PYTHON: "C:\\Python36-x64"
          PYTHON_VERSION: "3.6"
          PYTHON_ARCH: "64"
          GDAL_VERSION: "2.4.2"
          GIS_INTERNALS: "release-1911-x64-gdal-2-4-2-mapserver-7-4-0.zip"
          GIS_INTERNALS_LIBS: "release-1911-x64-gdal-2-4-2-mapserver-7-4-0-libs.zip"

        # Use daily stable branch of gdal 3.0.x series until release with gdal >= 3.0.1 is released
        - PYTHON: "C:\\Python36-x64"
          PYTHON_VERSION: "3.6"
          PYTHON_ARCH: "64"
          GDAL_VERSION: "3.0.0"
          GIS_INTERNALS: "release-1911-x64-gdal-3-0-mapserver-7-4.zip"
          GIS_INTERNALS_LIBS: "release-1911-x64-gdal-3-0-mapserver-7-4-libs.zip"
          PROJ_LIB: "C:\\gdal\\bin\\proj6\\share"

        - PYTHON: "C:\\Python37-x64"
          PYTHON_VERSION: "3.7"
          PYTHON_ARCH: "64"
          GDAL_VERSION: "2.4.2"
          GIS_INTERNALS: "release-1911-x64-gdal-2-4-2-mapserver-7-4-0.zip"
          GIS_INTERNALS_LIBS: "release-1911-x64-gdal-2-4-2-mapserver-7-4-0-libs.zip"

        - PYTHON: "C:\\Python37-x64"
          PYTHON_VERSION: "3.7"
          PYTHON_ARCH: "64"
          GDAL_VERSION: "3.0.0"
          GIS_INTERNALS: "release-1911-x64-gdal-3-0-mapserver-7-4.zip"
          GIS_INTERNALS_LIBS: "release-1911-x64-gdal-3-0-mapserver-7-4-libs.zip"
          PROJ_LIB: "C:\\gdal\\bin\\proj6\\share"

        - PYTHON: "C:\\Python37-x64"
          PYTHON_VERSION: "3.7"
          PYTHON_ARCH: "64"
          GDAL_VERSION: "3.1.0"
          GIS_INTERNALS: "release-1911-x64-gdal-mapserver.zip"
          GIS_INTERNALS_LIBS: "release-1911-x64-gdal-3-0-mapserver-7-4-libs.zip"
          PROJ_LIB: "C:\\gdal\\bin\\proj6\\share"

        - PYTHON: "C:\\Python38-x64"
          PYTHON_VERSION: "3.8"
          PYTHON_ARCH: "64"
          GDAL_VERSION: "3.1.0"
          GIS_INTERNALS: "release-1911-x64-gdal-mapserver.zip"
          GIS_INTERNALS_LIBS: "release-1911-x64-gdal-3-0-mapserver-7-4-libs.zip"
          PROJ_LIB: "C:\\gdal\\bin\\proj6\\share"

install:

  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  # - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "SET PYTHONPATH=%PYTHON%\\Lib\\site-packages;%PYTHONPATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  - ps: mkdir C:\build | out-null
  - ps: mkdir C:\gdal | out-null

  - curl http://download.gisinternals.com/sdk/downloads/%GIS_INTERNALS% --output gdalbin.zip
  - 7z x gdalbin.zip -oC:\gdal
  - curl http://download.gisinternals.com/sdk/downloads/%GIS_INTERNALS_LIBS% --output gdallibs.zip
  - 7z x gdallibs.zip -oC:\gdal
  - "SET PATH=C:\\gdal;C:\\gdal\\bin;C:\\gdal\\data;C:\\gdal\\bin\\gdal\\apps;%PATH%"
  - "SET GDAL_DATA=C:\\gdal\\bin\\gdal-data"
  - "SET PACKAGE_DATA=1"

  - ECHO "Filesystem C:/GDAL:"
  - ps: "ls \"C:/GDAL\""


  - cd C:\projects\fiona
  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - ps: python -m pip install --upgrade pip
  - ps: python -m pip --version

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install -r requirements-dev.txt"

  # Install coverage testing dependencies
#  - ps: python -m pip install coveralls>=1.1 --upgrade

build_script:
  # Build the compiled extension
  - cmd: echo %PATH%
  - cmd: echo %PYTHONPATH%

  # copy gisinternal gdal librarys into .libs
  - cmd: xcopy C:\gdal\bin\*.dll fiona\.libs\
  - cmd: xcopy C:\gdal\*.rtf fiona\.libs\licenses\

  # build fiona and create a wheel
  - "%CMD_IN_ENV% python setup.py build_ext -IC:\\gdal\\include -lgdal_i -LC:\\gdal\\lib bdist_wheel --gdalversion %GDAL_VERSION%"

  # install the wheel
  - ps: python -m pip install --no-deps --ignore-installed (gci dist\*.whl | % { "$_" })
  - ps: python -m pip freeze
  - ps: move fiona fiona.build


test_script:
  # Run the project tests
  - cmd: SET

  - ps: python -c "import fiona"

  # Our Windows GDAL doesn't have iconv and can't support certain tests.
  - "%CMD_IN_ENV% python -m pytest -m \"not iconv and not wheel\" --cov fiona --cov-report term-missing"

after_test:
#  - coveralls || echo "!! intermittent coveralls failure"

matrix:
  allow_failures:
    - GDAL_VERSION: "3.1.0"

artifacts:
  - path: dist\*.whl
    name: wheel
